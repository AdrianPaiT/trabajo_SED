/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdint.h>
#include <stdlib.h>

#define SEQUENCE_LENGTH 6  // Longitud de la secuencia
uint8_t sequence[SEQUENCE_LENGTH];  // Secuencia aleatoria
uint8_t user_input[SEQUENCE_LENGTH];  // Entrada del usuario
/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);

void Play_Level_1(void);
void Play_Level_2(void);
void Play_Level_3(void);
void Play_Level_4(void);

/* USER CODE BEGIN 0 */
uint16_t Read_ADC_Value(void)
{
    HAL_ADC_Start(&hadc1);  // Iniciar conversión ADC
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);  // Esperar a que termine la conversión
    uint16_t value = HAL_ADC_GetValue(&hadc1);  // Obtener el valor convertido
    HAL_ADC_Stop(&hadc1);  // Detener el ADC
    return value;
}

uint8_t Get_Difficulty_Level(uint16_t adc_value)
{
    uint16_t range = 4095 / 4;  // Rango de cada nivel
    if (adc_value < range) {
        return 1;  // Nivel 1
    } else if (adc_value < range * 2) {
        return 2;  // Nivel 2
    } else if (adc_value < range * 3) {
        return 3;  // Nivel 3
    } else {
        return 4;  // Nivel 4
    }
}

void Show_Difficulty_Level(uint8_t level)
{
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);  // Apagar todos los LEDs

    for (uint8_t i = 0; i < level; i++) {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 << i, GPIO_PIN_SET);  // Encender LEDs según el nivel
    }
}

void GenerateRandomSequence1(void)
{
    srand(HAL_GetTick());  // Inicializar semilla aleatoria
    for (int i = 0; i < 3; i++) {
        sequence[i] = rand() % 4;  // Generar un número entre 0 y 3
    }
}

void ShowSequence1(void)
{
    for (int i = 0; i < 3; i++) {
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_SET);  // Encender LED
        HAL_Delay(800);  // Esperar medio segundo
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_RESET);  // Apagar LED
        HAL_Delay(300);  // Esperar un poco antes de mostrar el siguiente
    }
}

void GenerateRandomSequence2(void)
{
    srand(HAL_GetTick());  // Inicializar semilla aleatoria
    for (int i = 0; i < 4; i++) {
        sequence[i] = rand() % 4;  // Generar un número entre 0 y 3
    }
}

void ShowSequence2(void)
{
    for (int i = 0; i < 4; i++) {
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_SET);  // Encender LED
        HAL_Delay(600);  // Esperar medio segundo
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_RESET);  // Apagar LED
        HAL_Delay(200);  // Esperar un poco antes de mostrar el siguiente
    }
}

void GenerateRandomSequence3(void)
{
    srand(HAL_GetTick());  // Inicializar semilla aleatoria
    for (int i = 0; i < 5; i++) {
        sequence[i] = rand() % 4;  // Generar un número entre 0 y 3
    }
}

void ShowSequence3(void)
{
    for (int i = 0; i < 5; i++) {
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_SET);  // Encender LED
        HAL_Delay(400);  // Esperar medio segundo
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_RESET);  // Apagar LED
        HAL_Delay(150);  // Esperar un poco antes de mostrar el siguiente
    }
}

void GenerateRandomSequence4(void)
{
    srand(HAL_GetTick());  // Inicializar semilla aleatoria
    for (int i = 0; i < 6; i++) {
        sequence[i] = rand() % 4;  // Generar un número entre 0 y 3
    }
}

void ShowSequence4(void)
{
    for (int i = 0; i < 6; i++) {
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_SET);  // Encender LED
        HAL_Delay(300);  // Esperar medio segundo
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_RESET);  // Apagar LED
        HAL_Delay(100);  // Esperar un poco antes de mostrar el siguiente
    }
}
int GetUserInput1(void)
{
	volatile uint32_t time_elapsed = 0;

    for (int i = 0; i < 3; i++) {
        while (1) {
				    if (time_elapsed >= 1300) {
            // Hacer algo después de 5 segundos
            return 0;  // Ejemplo: Toggle un LED
            time_elapsed = 0;  // Resetear el contador
        }
							 HAL_Delay(1);  // Retraso de 1 ms
        time_elapsed++;  // Incrementar el contador
				
						for (uint8_t button = 0; button < 4; button++) {
                if (HAL_GPIO_ReadPin(GPIOB, 1 << (button + 12)) == GPIO_PIN_SET) {
                    user_input[i] = button;
                    while (HAL_GPIO_ReadPin(GPIOB, 1 << (button + 12)) == GPIO_PIN_SET);  // Esperar a que se suelte el botón
                    HAL_GPIO_WritePin(GPIOD, 1 << (button + 12), GPIO_PIN_SET);  // Breve confirmación con LED
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, 1 << (button + 12), GPIO_PIN_RESET);
                    goto next_input;  // Salir del bucle interno
                }
            }
					
        }
    next_input:
        continue;
    }
    
    return 1;  // Si se capturan todos los inputs
}

int GetUserInput2(void)
{
		volatile uint32_t time_elapsed = 0;

    for (int i = 0; i < 4; i++) {
        while (1) {
					if (time_elapsed >= 1200) {
            // Hacer algo después de 5 segundos
            return 0;  // Ejemplo: Toggle un LED
            time_elapsed = 0;  // Resetear el contador
        }
							 HAL_Delay(1);  // Retraso de 1 ms
        time_elapsed++;  // Incrementar el contador
				
            for (uint8_t button = 0; button < 4; button++) {
                if (HAL_GPIO_ReadPin(GPIOB, 1 << (button + 12)) == GPIO_PIN_SET) {
                    user_input[i] = button;
                    while (HAL_GPIO_ReadPin(GPIOB, 1 << (button + 12)) == GPIO_PIN_SET);  // Esperar a que se suelte el botón
                    HAL_GPIO_WritePin(GPIOD, 1 << (button + 12), GPIO_PIN_SET);  // Breve confirmación con LED
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, 1 << (button + 12), GPIO_PIN_RESET);
                    goto next_input;  // Salir del bucle interno
                }
            }
        }
    next_input:
        continue;
    }
    
    return 1;  // Si se capturan todos los inputs
}

int GetUserInput3(void)
{
		volatile uint32_t time_elapsed = 0;

    for (int i = 0; i < 5; i++) {
        while (1) {
					if (time_elapsed >= 1100) {
            // Hacer algo después de 5 segundos
            return 0;  // Ejemplo: Toggle un LED
            time_elapsed = 0;  // Resetear el contador
        }
							 HAL_Delay(1);  // Retraso de 1 ms
        time_elapsed++;  // Incrementar el contador
				
            for (uint8_t button = 0; button < 4; button++) {
                if (HAL_GPIO_ReadPin(GPIOB, 1 << (button + 12)) == GPIO_PIN_SET) {
                    user_input[i] = button;
                    while (HAL_GPIO_ReadPin(GPIOB, 1 << (button + 12)) == GPIO_PIN_SET);  // Esperar a que se suelte el botón
                    HAL_GPIO_WritePin(GPIOD, 1 << (button + 12), GPIO_PIN_SET);  // Breve confirmación con LED
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, 1 << (button + 12), GPIO_PIN_RESET);
                    goto next_input;  // Salir del bucle interno
                }
            }
        }
    next_input:
        continue;
    }
    
    return 1;  // Si se capturan todos los inputs
}

int GetUserInput4(void)
{
		volatile uint32_t time_elapsed = 0;

    for (int i = 0; i < 6; i++) {
        while (1) {
					if (time_elapsed >= 1000) {
            // Hacer algo después de 5 segundos
            return 0;  // Ejemplo: Toggle un LED
            time_elapsed = 0;  // Resetear el contador
        }
							 HAL_Delay(1);  // Retraso de 1 ms
        time_elapsed++;  // Incrementar el contador
				
            for (uint8_t button = 0; button < 4; button++) {
                if (HAL_GPIO_ReadPin(GPIOB, 1 << (button + 12)) == GPIO_PIN_SET) {
                    user_input[i] = button;
                    while (HAL_GPIO_ReadPin(GPIOB, 1 << (button + 12)) == GPIO_PIN_SET);  // Esperar a que se suelte el botón
                    HAL_GPIO_WritePin(GPIOD, 1 << (button + 12), GPIO_PIN_SET);  // Breve confirmación con LED
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, 1 << (button + 12), GPIO_PIN_RESET);
                    goto next_input;  // Salir del bucle interno
                }
            }
        }
    next_input:
        continue;
    }
    
    return 1;  // Si se capturan todos los inputs
}
int CheckSequence(void)
{
    for (int i = 0; i < SEQUENCE_LENGTH; i++) {
        if (user_input[i] != sequence[i]) {
            return 0;  // Secuencia incorrecta
        }
    }
    return 1;  // Secuencia correcta
}

void Play_Level_1(void) {
	
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
		HAL_Delay(500);


    while (1)
    {
        GenerateRandomSequence1();  // Generar secuencia
        ShowSequence1();  // Mostrar secuencia

        if (GetUserInput1()) {  // Capturar entrada del usuario
            if (CheckSequence()) {
                // Secuencia correcta: indicar éxito
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
                    HAL_Delay(1000);
									Play_Level_2();
                }
            } else {
                // Secuencia incorrecta: indicar fallo
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        }
				else {
				for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        HAL_Delay(1000);  // Pausa antes de la siguiente secuencia
				break;
    }
}



void Play_Level_2(void)
{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 , GPIO_PIN_RESET);
	HAL_Delay(500);

    while (1) {
			  GenerateRandomSequence2();  // Generar secuencia
        ShowSequence2();  // Mostrar secuencia
			
			   if (GetUserInput2()) {  // Capturar entrada del usuario
            if (CheckSequence()) {
                // Secuencia correcta: indicar éxito
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
                    HAL_Delay(1000);
										Play_Level_3();

                }
            } else {
                // Secuencia incorrecta: indicar fallo
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        }
				 
				else {
				for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
				
       HAL_Delay(1000);  // Pausa antes de la siguiente secuencia
				break;
    }
}

void Play_Level_3(void)
{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 , GPIO_PIN_RESET);
	HAL_Delay(500);


     while (1) {
			  GenerateRandomSequence3();  // Generar secuencia
        ShowSequence3();  // Mostrar secuencia
			
			   if (GetUserInput3()) {  // Capturar entrada del usuario
            if (CheckSequence()) {
                // Secuencia correcta: indicar éxito
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
                    HAL_Delay(1000);
									  Play_Level_4();

                }
            } else {
                // Secuencia incorrecta: indicar fallo
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        }
				 
				else {
				for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
       HAL_Delay(1000);  // Pausa antes de la siguiente secuencia
				break;
    }
}

void Play_Level_4(void)
{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_Delay(500);


       while (1) {
			  GenerateRandomSequence4();  // Generar secuencia
        ShowSequence4();  // Mostrar secuencia
			
			   if (GetUserInput4()) {  // Capturar entrada del usuario
            if (CheckSequence()) {
                // Secuencia correcta: indicar éxito
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
                    HAL_Delay(1000);

                }
            } else {
                // Secuencia incorrecta: indicar fallo
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        }
				 
				else {
				for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
       HAL_Delay(1000);  // Pausa antes de la siguiente secuencia
				break;
    }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_ADC1_Init();

    /* USER CODE BEGIN 1 */
    uint8_t difficulty_level = 1;  // Nivel inicial predeterminado
    uint8_t level_confirmed = 0;  // Indicador para saber si el nivel ha sido confirmado

    /* USER CODE END 1 */

    /* Infinite loop */
    while (1)
    {
        if (!level_confirmed) {
            // Leer el nivel de dificultad desde el potenciómetro
            uint16_t adc_value = Read_ADC_Value();
            difficulty_level = Get_Difficulty_Level(adc_value);

            // Mostrar el nivel actual en los LEDs
            Show_Difficulty_Level(difficulty_level);

            // Esperar confirmación con el botón PB12
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
                HAL_Delay(100);  // Pequeño debounce
                level_confirmed = 1;  // Confirmar nivel
            }
        } else {
            // Mantener los LEDs encendidos en el nivel confirmado
             if (difficulty_level == 1) {
                Play_Level_1();
            }
						 else if (difficulty_level == 2) {
								Play_Level_2();
						}
						 else if (difficulty_level == 3) {
								Play_Level_3();
						} 
						 else if (difficulty_level == 4) {
								Play_Level_4();
						}
            // Reiniciar el sistema
            level_confirmed = 0;
        }

        HAL_Delay(100);  // Delay para estabilizar
    }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
    ADC_ChannelConfTypeDef sConfig = {0};

    /* Configure ADC1 */
    __HAL_RCC_ADC1_CLK_ENABLE();  // Habilitar reloj del ADC1

    hadc1.Instance = ADC1;
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;  // Divisor del reloj
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;  // Resolución de 12 bits
    hadc1.Init.ScanConvMode = DISABLE;  // Modo de conversión única
    hadc1.Init.ContinuousConvMode = ENABLE;  // Modo continuo para lecturas sucesivas
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    hadc1.Init.NbrOfConversion = 1;
    hadc1.Init.DMAContinuousRequests = DISABLE;
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;

    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
        Error_Handler();
    }

    /* Configure regular channel */
    sConfig.Channel = ADC_CHANNEL_0;  // Canal 0 (potenciómetro conectado a PA0)
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
        Error_Handler();
    }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    __HAL_RCC_GPIOD_CLK_ENABLE();

    /* Configure GPIO pins for LEDs */
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    /* Configure GPIO pin for button */
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /* Configure the main internal regulator output voltage */
    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

    /* Initializes the CPU, AHB and APB busses clocks */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 7;

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
        Error_Handler();
    }
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    while (1) {
        // Error loop
    }
}
