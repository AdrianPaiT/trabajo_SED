/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

#define SEQUENCE_LENGTH 6  // Longitud de la secuencia
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
ADC_HandleTypeDef hadc1;
volatile uint8_t n_botones=0;
uint8_t sequence[SEQUENCE_LENGTH];  // Secuencia aleatoria
uint8_t user_input[SEQUENCE_LENGTH];  // Entrada del usuario
uint16_t value;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
void Play_Level_1(void);
void Play_Level_2(void);
void Play_Level_3(void);
void Play_Level_4(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	 static uint32_t last_interrupt_time = 0; // Tiempo del último evento
	    uint32_t current_time = HAL_GetTick();  // Tiempo actual en milisegundos

	    if (current_time - last_interrupt_time < 200) {
	        return; // 
	    }
	    last_interrupt_time = current_time;
    if (GPIO_Pin == GPIO_PIN_12) {
    	user_input[n_botones] = 0;  // Botón 0
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
    } else if (GPIO_Pin == GPIO_PIN_13) {
    	user_input[n_botones] = 1;  // Botón 1
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
    } else if (GPIO_Pin == GPIO_PIN_14) {
    	user_input[n_botones] = 2;  // Botón 2
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
    } else if (GPIO_Pin == GPIO_PIN_15) {
    	user_input[n_botones] = 3;  // Botón 3
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
    }
    n_botones++;
}
uint16_t Read_ADC_Value(void)
{
    HAL_ADC_Start(&hadc1);  // Iniciar conversión ADC
    if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY)==HAL_OK);  // Esperar a que termine la conversión
    {
    value = HAL_ADC_GetValue(&hadc1);  // Obtener el valor convertido
    }
    HAL_ADC_Stop(&hadc1);  // Detener el ADC
    return value;
}

uint8_t Get_Difficulty_Level(uint16_t adc_value)
{
    uint16_t range = 4095 / 4;  // Rango de cada nivel
    if (adc_value < range) {
        return 1;  // Nivel 1
    } else if (adc_value < range * 2) {
        return 2;  // Nivel 2
    } else if (adc_value < range * 3) {
        return 3;  // Nivel 3
    } else {
        return 4;  // Nivel 4
    }
}

void Show_Difficulty_Level(uint8_t level)
{
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);  // Apagar todos los LEDs

    for (uint8_t i = 0; i < level; i++) {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 << i, GPIO_PIN_SET);  // Encender LEDs según el nivel
    }
}

void GenerateRandomSequence1(void)
{
    srand(HAL_GetTick());  // Inicializar semilla aleatoria
    for (int i = 0; i < 3; i++) {
        sequence[i] = rand() % 4;  // Generar un número entre 0 y 3
    }
}

void ShowSequence1(void)
{
    for (int i = 0; i < 3; i++) {
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_SET);  // Encender LED
        HAL_Delay(800);  // Esperar medio segundo
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_RESET);  // Apagar LED
        HAL_Delay(300);  // Esperar un poco antes de mostrar el siguiente
    }
}

void GenerateRandomSequence2(void)
{
    srand(HAL_GetTick());  // Inicializar semilla aleatoria
    for (int i = 0; i < 4; i++) {
        sequence[i] = rand() % 4;  // Generar un número entre 0 y 3
    }
}

void ShowSequence2(void)
{
    for (int i = 0; i < 4; i++) {
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_SET);  // Encender LED
        HAL_Delay(600);  // Esperar medio segundo
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_RESET);  // Apagar LED
        HAL_Delay(200);  // Esperar un poco antes de mostrar el siguiente
    }
}

void GenerateRandomSequence3(void)
{
    srand(HAL_GetTick());  // Inicializar semilla aleatoria
    for (int i = 0; i < 5; i++) {
        sequence[i] = rand() % 4;  // Generar un número entre 0 y 3
    }
}

void ShowSequence3(void)
{
    for (int i = 0; i < 5; i++) {
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_SET);  // Encender LED
        HAL_Delay(400);  // Esperar medio segundo
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_RESET);  // Apagar LED
        HAL_Delay(150);  // Esperar un poco antes de mostrar el siguiente
    }
}

void GenerateRandomSequence4(void)
{
    srand(HAL_GetTick());  // Inicializar semilla aleatoria
    for (int i = 0; i < 6; i++) {
        sequence[i] = rand() % 4;  // Generar un número entre 0 y 3
    }
}

void ShowSequence4(void)
{
    for (int i = 0; i < 6; i++) {
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_SET);  // Encender LED
        HAL_Delay(300);  // Esperar medio segundo
        HAL_GPIO_WritePin(GPIOD, 1 << (sequence[i] + 12), GPIO_PIN_RESET);  // Apagar LED
        HAL_Delay(100);  // Esperar un poco antes de mostrar el siguiente
    }
}
int GetUserInput(uint8_t sequence_length)
{
    n_botones = 0; // Reiniciar el índice del usuario

    // Esperar hasta que el usuario complete la secuencia o se agote el tiempo
    uint32_t start_time = HAL_GetTick();
    while (n_botones < sequence_length) {
        if ((HAL_GetTick() - start_time) > 10000) {
            return 0;  // Tiempo agotado
        }
    }

    return 1;  // Secuencia completada correctamente
}

int CheckSequence(void)
{
    for (int i = 0; i < SEQUENCE_LENGTH; i++) {
        if (user_input[i] != sequence[i]) {
            return 0;  // Secuencia incorrecta
        }
    }
    return 1;  // Secuencia correcta
}

void Play_Level_1(void) {

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
		HAL_Delay(500);


    while (1)
    {
        GenerateRandomSequence1();  // Generar secuencia
        ShowSequence1();  // Mostrar secuencia

        if (GetUserInput(3)) {  // Capturar entrada del usuario
            if (CheckSequence()) {
                // Secuencia correcta: indicar éxito
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
                    HAL_Delay(1000);
									Play_Level_2();
                }
            } else {
                // Secuencia incorrecta: indicar fallo
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        }
				else {
				for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        HAL_Delay(1000);  // Pausa antes de la siguiente secuencia
				break;
    }
}



void Play_Level_2(void)
{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 , GPIO_PIN_RESET);
	HAL_Delay(500);

    while (1) {
			  GenerateRandomSequence2();  // Generar secuencia
        ShowSequence2();  // Mostrar secuencia

			   if (GetUserInput(4)) {  // Capturar entrada del usuario
            if (CheckSequence()) {
                // Secuencia correcta: indicar éxito
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
                    HAL_Delay(1000);
										Play_Level_3();

                }
            } else {
                // Secuencia incorrecta: indicar fallo
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        }

				else {
				for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }

       HAL_Delay(1000);  // Pausa antes de la siguiente secuencia
				break;
    }
}

void Play_Level_3(void)
{
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 , GPIO_PIN_RESET);
	HAL_Delay(500);


     while (1) {
			  GenerateRandomSequence3();  // Generar secuencia
        ShowSequence3();  // Mostrar secuencia

			   if (GetUserInput(5)) {  // Capturar entrada del usuario
            if (CheckSequence()) {
                // Secuencia correcta: indicar éxito
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
                    HAL_Delay(1000);
									  Play_Level_4();

                }
            } else {
                // Secuencia incorrecta: indicar fallo
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        }

				else {
				for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
       HAL_Delay(1000);  // Pausa antes de la siguiente secuencia
				break;
    }
}

void Play_Level_4(void)
{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
		HAL_Delay(500);


       while (1) {
			  GenerateRandomSequence4();  // Generar secuencia
        ShowSequence4();  // Mostrar secuencia

			   if (GetUserInput(6)) {  // Capturar entrada del usuario
            if (CheckSequence()) {
                // Secuencia correcta: indicar éxito
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
                    HAL_Delay(200);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
                    HAL_Delay(1000);

                }
            } else {
                // Secuencia incorrecta: indicar fallo
                for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
        }

				else {
				for (int i = 0; i < 3; i++) {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
                    HAL_Delay(100);
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_RESET);
                    HAL_Delay(100);
                }
            }
       HAL_Delay(1000);  // Pausa antes de la siguiente secuencia
				break;
    }
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	    uint8_t difficulty_level = 1;  // Nivel inicial predeterminado
	    uint8_t level_confirmed = 0;  // Indicador para saber si el nivel ha sido confirmado

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!level_confirmed) {
	              // Leer el nivel de dificultad desde el potenciómetro
	              uint16_t adc_value = Read_ADC_Value();
	              difficulty_level = Get_Difficulty_Level(adc_value);

	              // Mostrar el nivel actual en los LEDs
	              Show_Difficulty_Level(difficulty_level);

	              // Esperar confirmación con el botón PB12
	              if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
	                  HAL_Delay(100);  // Pequeño debounce
	                  level_confirmed = 1;  // Confirmar nivel
	              }
	          } else {
	              // Mantener los LEDs encendidos en el nivel confirmado
	               if (difficulty_level == 1) {
	                  Play_Level_1();
	              }
	  						 else if (difficulty_level == 2) {
	  								Play_Level_2();
	  						}
	  						 else if (difficulty_level == 3) {
	  								Play_Level_3();
	  						}
	  						 else if (difficulty_level == 4) {
	  								Play_Level_4();
	  						}
	              // Reiniciar el sistema
	              level_confirmed = 0;
	          }

	          HAL_Delay(100);  // Delay para estabilizar
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
